import argparse  # Module for parsing command-line arguments
import sys  # Module for interacting with the system
import logging  # Module for logging errors and messages
import traceback  # Module for printing stack traces
import tkinter as tk  # Module for building GUI applications
from tkinter import messagebox  # Module for displaying message boxes in GUI
from gui.gui import GuiApp  # Importing the GUI application class
from func.func import PenetrationTestingTool  # Importing the Penetration Testing Tool class


def main():
    try:
        # Setting up argument parser
        parser = argparse.ArgumentParser(description="Penetration Testing Tool")

        # Adding optional arguments for different functionalities
        parser.add_argument("--scan-ports", action="store_true", help="Enable port scanning")
        parser.add_argument("--run-hydra", action="store_true", help="Enable Hydra execution")
        parser.add_argument("--run-hashcat", action="store_true", help="Enable Hashcat execution")
        parser.add_argument("--scan-web-app", action="store_true", help="Scan web application for XSS vulnerabilities")
        parser.add_argument("--gui", action="store_true", help="Enable GUI mode")
        parser.add_argument("--run-ettercap", action="store_true", help="Enable Ettercap execution")
        parser.add_argument("--interface", help="Specify the network interface for Ettercap")
        parser.add_argument("--output", help="Specify the output file name")
        parser.add_argument("--port", type=int, help="Specify the port number")
        parser.add_argument("--ip", help="Specify the IP address to scan")
        parser.add_argument("--port-end", type=int, help="Specify the end port number")
        parser.add_argument("--timeout", type=float, help="Specify the timeout for port scanning in seconds")

        # Parsing command-line arguments
        args = parser.parse_args()

        # Setting default values for optional arguments if not provided
        args.output = args.output or "Info.json"
        args.port = args.port or 80
        args.port_end = args.port_end or 65535
        args.timeout = args.timeout or 1.0

        # Creating an instance of PenetrationTestingTool class
        penetration_tool = PenetrationTestingTool(args)
        # Running the penetration testing tool
        penetration_tool.run()

        # If GUI mode is enabled
        if args.gui:
            # Creating the root window for the GUI
            root = tk.Tk()
            # Creating an instance of the GUI application
            gui = GuiApp(root)
            # Running the GUI application
            root.mainloop()

    except Exception as e:
        # Logging the error message and stack trace
        logging.exception("An unexpected error occurred:")
        # Printing the stack trace
        traceback.print_exc()
        # Printing the exception message
        print(f"Error: {e}")
        # Exiting with error code 1
        sys.exit(1)


if __name__ == "__main__":
    # Entry point of the script
    main()
