import logging  # Module for logging messages and errors
import json  # Module for working with JSON data
import subprocess  # Module for running external commands
from pathlib import Path  # Module for working with file paths

# Base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent
# Path to the folder containing JSON files
JSON_FOLDER_PATH = BASE_DIR / "json"
# Path to the service-port.json file
SERVICE_NAMES_PATH = JSON_FOLDER_PATH / "service-port.json"
# Path to the service-port-verify.json file
SERVICE_PORT_VERIFY_PATH = JSON_FOLDER_PATH / "service-port-verify.json"
# Path to the log file
LOG_FILE_PATH = BASE_DIR / "output.log"

# Default configuration settings
CONFIG = {
    "output_file": "Info.json",
    "default_port": 80,
    "default_start_point": 1,
    "default_end_port": 65535,
    "default_timeout": 1.0,
}


class PenetrationTestingTool:
    """
    Class representing a Penetration Testing Tool.

    Attributes:
        args (object): Command-line arguments.
    """

    def __init__(self, args):
        """
        Initialize the PenetrationTestingTool instance.

        Args:
            args (object): Command-line arguments.
        """
        self.args = args

    def run(self):
        """
        Method to run the penetration testing tool.
        """
        pass


class FileUtilities:
    """
    Utility class for file operations.
    """

    @staticmethod
    def load_json_file(file_path):
        """
        Load JSON data from a file.

        Args:
            file_path (str): Path to the JSON file.

        Returns:
            dict: Loaded JSON data.

        """
        try:
            with open(file_path, "r") as file:
                return json.load(file)
        except FileNotFoundError:
            logging.error(f"JSON file not found at path: {file_path}")
            return {}
        except json.JSONDecodeError as e:
            logging.error(f"Error decoding JSON file at path {file_path}: {str(e)}")
            return {}
        except Exception as e:
            logging.error(f"Failed to read JSON file ({file_path}): {str(e)}")
            return {}

    @staticmethod
    def execute_command(command, description):
        """
        Execute a command and log the result.

        Args:
            command (str): Command to execute.
            description (str): Description of the command.
        """
        try:
            subprocess.run(command, shell=True, check=True)
            logging.info(description)
        except subprocess.CalledProcessError as e:
            logging.error(f"Error executing {description}: {e}")
